@using CMS.Domain.Enums;
@model CMS.Application.DTOs.InterviewsDTO


    
<h2>Update Interview Result:   <span style="color:red;">@Model.FullName</span> </h2>

<form asp-action="UpdateAfterInterview" id="updateForm" method="post" enctype="multipart/form-data">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="InterviewsId" />
    <input type="hidden" asp-for="InterviewerId" />
    <input type="hidden" asp-for="EvalutaionFormId" />
    <input type="hidden" asp-for="CandidateId" />
    <input type="hidden" asp-for="PositionId" />
    <input type="hidden" asp-for="isUpdated" />
    @if (User.IsInRole("Interviewer"))
    {
        <div class="form-group">
            <label asp-for="Score"><span class="text-danger">*</span> Score out of 5:</label>
            <input style="width: 10%;" asp-for="Score" class="form-control score" />
            <span asp-validation-for="Score" class="text-danger"></span>
        </div>
    }

  
    @if (!User.IsInRole("HR Manager"))
    {
        <div class="form-group" style="margin-top: 15px;">
            <label asp-for="ActualExperience"><span class="text-danger">*</span> Actual Experience:</label>
            <input style="width: 10%;" asp-for="ActualExperience" class="form-control actualexperience" pattern="^(?:0(\.\d+)?|[1-9]\d*(\.\d+)?)$" title="Experience must be a non-negative numeric value." />
            <span asp-validation-for="ActualExperience" class="text-danger"></span>
        </div>
    }

    <div class="form-group" style="margin-top: 15px;">

        <label asp-for="StatusId" class="control-label">Status</label>
        @if (ViewBag.StatusDTOs != null)
        {

            <select style="width:30%;" asp-for="StatusId" class="form-control">
                <option value="">Select a Status</option>
                @foreach (var sta in ViewBag.StatusDTOs)
                {
                    if (sta.Text != StatusCode.GetName("PND"))
                    {
                    <option value="@sta.Value" selected="@(sta.Value == Model.StatusId.ToString())">@sta.Text</option>
                    }
                }

            </select>
        }
        else
        {
            <p>No statuses available.</p>
        }
        <span asp-validation-for="StatusId" class="text-danger"></span>

    </div>

    <div class="form-group" style="margin-top: 15px;">
        <label asp-for="Notes">Notes:</label>
        <textarea style="width: 40%;" asp-for="Notes" class="form-control"></textarea>
        <span asp-validation-for="Notes" class="text-danger"></span>
    </div>


    @if (User.IsInRole("Interviewer"))
    {
        @if (Model.EvalutaionFormId != null)
        {
            <div class="alert alert-info" style="margin-top: 15px;">
                <p>
                    Please download the evaluation form by clicking the link below. After making the necessary modifications, please upload the modified form using the file input field.
                </p>
                <a asp-controller="Attachments" asp-action="Download" asp-route-id="@Model.EvalutaionFormId">Download Evaluation Form</a>
            </div>
        }
        else
        {
            <p></p>
        }

        <div class="form-group" style="margin-top: 15px;">
            <label for="file"><span class="text-danger">*</span> Upload An evaluation:</label>
            <input style="width:30%;" type="file" id="file" name="file" class="form-control-file" onchange="validateFileFormat(this)"  />

            @if (Model.AttachmentId != null)
            {
                <div class="mt-2">
                    <strong>Previously uploaded file:</strong>
                    <a asp-controller="Attachments" asp-action="Download" asp-route-id="@Model.AttachmentId">Download File</a>
                </div>
            }

            <br>
            <span asp-validation-for="AttachmentId" class="text-danger"></span>
            <span id="fileError" class="text-danger"></span>
        </div>
     
    }

    <p>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Submit</button>
            <a class="btn btn-secondary" asp-action="MyInterviews">Back to List</a>
        </div>
    </p>
</form>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>


<script>
    $(document).ready(function () {


          // Allow numeric characters from 1 to 5 and decimal numbers like 2.5 in the score field
        $('.score').on('input', function () {
            // Remove any non-numeric and non-decimal characters
            this.value = this.value.replace(/[^0-9.]/g, '');

            // Ensure the value is within the range of 1 to 5
            if (parseFloat(this.value) < 1) {
                this.value = '1';
            } else if (parseFloat(this.value) > 5) {
                this.value = '5';
            }
        });


        // Prevent letters in the actual experience field
        $('.actualexperience').on('input', function () {
            this.value = this.value.replace(/[^0-9.]/g, ''); // Allow only numeric characters
        });


        $('#updateForm').submit(function (e) {
            // Clear previous error messages
            $(".text-danger").text("");

        

            // Additional validations can be added here for other fields if needed

            // Validate Score (if user is Interviewer)
            if ($('[name="Score"]').is(":visible")) {
                if (!$('[name="Score"]').val()) {
                    $('#Score').next(".text-danger").text("Score is required.");
                    e.preventDefault();
                    return;
                }
            }

            // Validate Notes (if StatusId is 3)
            if ($('[name="StatusId"]').val() === "3" && !$('[name="Notes"]').val()) {
                $('#Notes').next(".text-danger").text("Please add a note for why it was rejected.");
                e.preventDefault();
                return;
            }

            // Validate StatusId
            if (!$('[name="StatusId"]').val()) {
                $('#StatusId').next(".text-danger").text("Status is required.");
                e.preventDefault();
                return;
            }

             var fileInput = $('[name="file"]');

            // Use SweetAlert2 for confirmation
            Swal.fire({
                title: 'Are you sure?',
                text: 'You are about to submit the form.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, submit it!',
                cancelButtonText: 'No, cancel!',
            }).then((result) => {
                if (result.isConfirmed) {
                    // If confirmed, submit the form
                    $('#updateForm').off('submit').submit();
                }
                // If canceled, do nothing
            });

            e.preventDefault();
        });


        // Function to check if a value is numeric
        function isNumeric(value) {
            return !isNaN(value) && isFinite(value);
        }
    });

    // Additional function to validate file format (assuming it's used elsewhere)
    function validateFileFormat(input) {
        // Add file format validation logic here if needed
    }
</script>

